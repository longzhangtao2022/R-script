rm(list = ls())
options(stringsAsFactors = F)
library(stringr)
#整理原始数据
miRNA = read.csv(file = 'data/miRNA_Readcount_TPM.csv', header = T)
miRNA_count = miRNA[,2:31];row.names(miRNA_count) = miRNA$sRNA.readcount
miRNA_TPM = miRNA[,32:61];row.names(miRNA_TPM) = miRNA$sRNA.readcount
colnames(miRNA_count) = substr(colnames(miRNA_count),1,2)
colnames(miRNA_TPM) = substr(colnames(miRNA_TPM),1,2)
save(miRNA_count,miRNA_TPM,file ="mir_Rdata" )

load(file = "mir_Rdata")


rawcount<-miRNA_count[,c(25:30,1:6)]#挑选需要时间点是数据与0时数据
#构建分组信息

group<-data.frame(x = colnames(rawcount),y = c(rep("72H",6),rep("0H",6)))

#过滤低表达基因
keep <- rowSums(rawcount>0) >= floor(0.75*ncol(rawcount))
table(keep)

filter_count <- rawcount[keep,]
filter_count[1:4,1:4]
dim(filter_count)
# 加载edgeR包计算counts per millio(cpm) 表达矩阵
library(edgeR)
express_cpm <- cpm(filter_count)
express_cpm[1:6,1:6]

# 保存表达矩阵和分组结果
save(filter_count, express_cpm, group, file = "data/Step01-airwayData.Rdata")

#开始差异分析
rm(list = ls())
options(stringsAsFactors = F)

# 加载包
library(edgeR)
library(ggplot2)

# 读取基因表达矩阵信息并查看分组信息和表达矩阵数据
lname <- load(file = "data/Step01-airwayData.Rdata")
lname

# 表达谱
filter_count[1:4,1:4]

# 分组信息
group_list <- group[match(colnames(filter_count),group$x),2]
group_list

comp <- unlist(strsplit("72H_vs_0H",split = "_vs_"))
group_list <- factor(group_list,levels = comp)
group_list
table(group_list)
# 构建线性模型。0代表x线性模型的截距为0
design <- model.matrix(~0+group_list)
rownames(design) <- colnames(filter_count)
colnames(design) <- levels(factor(group_list))
design

# 构建edgeR的DGEList对象
DEG <- DGEList(counts=filter_count, 
               group=factor(group_list))

# 归一化基因表达分布
DEG <- calcNormFactors(DEG)

# 计算线性模型的参数
DEG <- estimateGLMCommonDisp(DEG,design)
DEG <- estimateGLMTrendedDisp(DEG, design)
DEG <- estimateGLMTagwiseDisp(DEG, design)

# 拟合线性模型
fit <- glmFit(DEG, design)

# 进行差异分析
lrt <- glmLRT(fit, contrast=c(1,-1)) 

# 提取过滤差异分析结果
DEG_edgeR <- as.data.frame(topTags(lrt, n=nrow(DEG)))
head(DEG_edgeR)

# 筛选上下调，设定阈值
fc_cutoff <- 1.5
pvalue <- 0.05

DEG_edgeR$regulated <- "normal"

loc_up <- intersect(which( DEG_edgeR$logFC > log2(fc_cutoff) ),
                    which( DEG_edgeR$PValue < pvalue) )

loc_down <- intersect(which(DEG_edgeR$logFC < (-log2(fc_cutoff))),
                      which(DEG_edgeR$PValue<pvalue))

DEG_edgeR$regulated[loc_up] <- "up"
DEG_edgeR$regulated[loc_down] <- "down"

table(DEG_edgeR$regulated)



# 选择显著差异表达的结果
library(tidyverse)
DEG_edgeR_symbol_Sig <- filter(DEG_edgeR,regulated!="normal")

# 保存
write.csv(DEG_edgeR,"result/4.mir_edgeR_E_A_ALL.csv", row.names = T)
write.csv(DEG_edgeR_symbol_Sig,"result/4.mir_edgeR_Sig_E_A.csv", row.names = T)
#重复四次，每次更改文件名
